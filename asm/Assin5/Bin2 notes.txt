=======================
Main
-----------------------
What it calls:
    generatePassword

Parameters taken / return values and types:


basic structure:
    loop{
      zero out localArray[10]
    }
    loop{
      ask for passwordLength;
    } break when input value >9
    call generatePassword(localArray, passwordLength)
    print generatePassword;
    return

What it does:
    This program asks for user input (an integer length), then calls generatePassword to generate a random string of that length, and then main prints that string to the screen before returning. Main in particular initializes an array of length 10, and passes that along with the password length into the generatePassword function.

Potential vulnerability:
    no upper cap on the length of the password being generated. if generatePassword performs no checks then we can potentially overwrite the return address on the stack with a randomly generated value.

    it looks like Main zeroes the least significant bit in the esp register before pushing esp to ebp. This is probably just a quirk of the compiler that I don't recognize, but it randomizes the stack buffer between variables and the return address that main's ret would use...

=======================

=======================
generatePassword
-----------------------
What it calls:
  Custom:
    .
  system:
    .

Parameters taken / return values and types:
  array*, int (length of string to generate)

basic structure:


What it does:


Potential vulnerability:
no check on the length.

=======================
