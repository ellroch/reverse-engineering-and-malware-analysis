;stdcall callee cleans stack
;nasm -f elf32 stdcall.asm
;gcc -m32 stdcall.o -o stdcall

extern printf
bits 32

section .data:
    format: db "%d", 10


;   When linking with system libraries do not use 'start'
;   Main is expected to be 'main' when linking with system libraries

section .text:
    global main

main:
;   function prologue
    push ebp
    mov  ebp, esp
    push ebx; [ebp]
    push esi; [ebp-0x04]
    push edi; [ebp-0x08]

    sub  esp, 0x0c; esp = [ebp-0x14] (3 local variables, two for input, one for returns)
;   mov dword <LOCATION>, 0x17
    mov dword [ebp-0xc], 0x17
;   mov dword <LOCATION>, 0x2e
    mov dword [ebp-0x0f], 0x2e                          
;...program...
    push eax; [ebp-0x18]
    push ecx; [ebp-0x1c]
    push edx; [ebp-0x1f]
;   funcone(int1, int2)
;   push argument 2
    push dword [ebp-0x0f]; 0x2e funcone[ebp+0x0f]
;   push argument 1
    push dword [ebp-0x0c]; 0x17, funcone[ebp+0x0c]

    call funcone; pushes current address on stack, funcone[ebp+0x08]
    mov [ebp-0x14], eax; should contain 0x422
;   functwo(int1)
;   push argument 1
    push dword [ebp-0x14]; functwo[ebp+0x0c]

    call functwo; pushes current address on stack, functwo[ebp+0x08]
    mov [ebp-0x14], eax; should contain 0x418
;   push variable onto stack to print
    push dword [ebp-0x14]
    push dword format
    call printf
;...clean up...
    pop edx
    pop ecx
    pop eax
    add esp, 0x0c
    pop edi
    pop esi
    pop ebx
    mov esp, ebp
    pop ebp
;terminate program
    mov ebx, eax
    mov eax, 0x01
    int 0x80


funcone:
;   function prologue
    push ebp; [ebp+0x04]
    mov  ebp, esp
    push ebx; [ebp]
    push esi; [ebp-0x04]
    push edi; [ebp-0x08]
;   do the math (multiply them)
    mov  eax, [ebp+0x0c]
    imul eax, [ebp+0x0f]
;   clean the stack
    pop edi
    pop esi
    pop ebx
    mov esp, ebp
    pop ebp
    ret 0x08



functwo:
;   function prologue
    push ebp; [ebp+0x04]
    mov  ebp, esp
    push ebx; [ebp]
    push esi; [ebp-0x04]
    push edi; [ebp-0x08]
;   do the math (sub 10)
    xor eax, eax
    mov eax, [ebp+0x0c]
    sub eax, 0x0a
;   clean the stack
    pop edi
    pop esi
    pop ebx
    mov esp, ebp
    pop ebp
    ret 0x04